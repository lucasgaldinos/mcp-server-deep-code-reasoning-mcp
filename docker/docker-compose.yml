version: "3.8"

services:
    # Main MCP Server
    mcp-server:
        build:
            context: .
            target: production
        container_name: deep-code-reasoning-mcp
        restart: unless-stopped
        environment:
            - NODE_ENV=production
            - GEMINI_API_KEY=${GEMINI_API_KEY}
            - LOG_LEVEL=${LOG_LEVEL:-info}
        volumes:
            - ./logs:/app/logs
        networks:
            - mcp-network
        healthcheck:
            test:
                [
                    "CMD",
                    "node",
                    "-e",
                    "console.log('Health check: MCP server running')",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        labels:
            - "com.mcp.service=deep-code-reasoning"
            - "com.mcp.version=1.0.0"

    # Development server with hot reload
    mcp-dev:
        build:
            context: .
            target: development
        container_name: deep-code-reasoning-mcp-dev
        environment:
            - NODE_ENV=development
            - GEMINI_API_KEY=${GEMINI_API_KEY}
            - LOG_LEVEL=debug
        volumes:
            - ./src:/app/src
            - ./docs:/app/docs
            - ./examples:/app/examples
            - ./logs:/app/logs
            - /app/node_modules
        networks:
            - mcp-network
        profiles:
            - development

    # Testing container
    mcp-test:
        build:
            context: .
            target: testing
        container_name: deep-code-reasoning-mcp-test
        environment:
            - NODE_ENV=test
            - GEMINI_API_KEY=${GEMINI_API_KEY}
        volumes:
            - ./src:/app/src
            - ./tests:/app/tests
            - ./coverage:/app/coverage
        networks:
            - mcp-network
        profiles:
            - testing

    # Monitoring and observability (optional)
    prometheus:
        image: prom/prometheus:latest
        container_name: mcp-prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
        networks:
            - mcp-network
        profiles:
            - monitoring

    grafana:
        image: grafana/grafana:latest
        container_name: mcp-grafana
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
        networks:
            - mcp-network
        profiles:
            - monitoring

networks:
    mcp-network:
        driver: bridge
        name: mcp-network

volumes:
    prometheus_data:
        driver: local
    grafana_data:
        driver: local
